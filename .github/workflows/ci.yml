name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: keynest_test
          POSTGRES_USER: keynest
          POSTGRES_PASSWORD: keynest_test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python manage.py test
        env:
          DB_NAME: keynest_test
          DB_USER: keynest
          DB_PASSWORD: keynest_test_pass
          DB_HOST: localhost
          DB_PORT: 5432
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          FERNET_KEY: test-fernet-key-for-ci-32-chars!!
          DEBUG: False

      - name: Run security checks
        run: |
          cd backend
          pip install bandit safety
          bandit -r . -x ./venv
          safety check

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm packages
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run TypeScript type check
        run: |
          cd frontend
          npm run type-check

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: http://localhost:8001

      - name: Run frontend tests (when implemented)
        run: |
          cd frontend
          # npm run test
          echo "Frontend tests will be implemented in future versions"

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test backend Docker build
        run: |
          cd backend
          docker build -t keynest-backend-test .

      - name: Test frontend Docker build
        run: |
          cd frontend
          docker build -t keynest-frontend-test .

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          cd backend
          docker compose -f docker-compose.dev.yml up -d
          sleep 30  # Wait for services to be ready

      - name: Test API health
        run: |
          curl -f http://localhost:8001/health/ || exit 1

      - name: Run API tests
        run: |
          # Create test user and run basic API tests
          curl -X POST http://localhost:8001/api/auth/register/ \
            -H "Content-Type: application/json" \
            -d '{
              "username": "testuser",
              "email": "test@example.com",
              "password": "testpass123",
              "confirm_password": "testpass123",
              "first_name": "Test",
              "last_name": "User"
            }' || exit 1

      - name: Clean up
        if: always()
        run: |
          cd backend
          docker compose -f docker-compose.dev.yml down

  # Deployment Preview (for main branch)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to preview environment
        run: |
          echo "Deploying to preview environment..."
          echo "This would deploy to a staging/preview environment"
          echo "Frontend URL: https://preview.keynest.dev"
          echo "Backend URL: https://api-preview.keynest.dev"

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan, docker-build, integration-tests]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Notify failure
        run: |
          echo "CI/CD pipeline failed for ${{ github.ref }}"
          echo "This would send notifications to team members"
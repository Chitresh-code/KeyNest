version: '3.8'

services:
  # Django Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: keynest-api
    ports:
      - "8001:8000"
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - CACHE_LOCATION=${CACHE_LOCATION:-redis://redis:6379/1}
      - ALLOWED_HOSTS=envnest.shop,www.envnest.shop,127.0.0.1,0.0.0.0
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS:-True}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ACCESS_TOKEN_LIFETIME=${JWT_ACCESS_TOKEN_LIFETIME:-300}
      - JWT_REFRESH_TOKEN_LIFETIME=${JWT_REFRESH_TOKEN_LIFETIME:-86400}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT:-True}
      - SECURE_HSTS_SECONDS=${SECURE_HSTS_SECONDS:-31536000}
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE:-True}
      - CSRF_COOKIE_SECURE=${CSRF_COOKIE_SECURE:-True}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RATELIMIT_ENABLE=${RATELIMIT_ENABLE:-True}
      - SITE_NAME=${SITE_NAME:-KeyNest}
      - SITE_URL=https://envnest.shop
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-KeyNest.settings}
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
      - ./media:/app/media
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: keynest-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: keynest-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/app/static:ro
      - ./media:/app/media:ro
      - certbot-etc:/etc/letsencrypt   # ðŸ”¹ mount certbot certs
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/ssl-dhparam:/etc/ssl/certs
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for Let's Encrypt SSL
  certbot:
    image: certbot/certbot
    container_name: keynest-certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/www:/var/www/certbot
    entrypoint: >
      sh -c "trap exit TERM; while :; do
             certbot renew --webroot -w /var/www/certbot;
             sleep 12h & wait $${!};
             done"

  # ðŸ”¹ Web-based Log Viewer (Dozzle)
  dozzle:
    image: amir20/dozzle:latest
    container_name: keynest-dozzle
    ports:
      - "9999:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    depends_on:
      - api
      - nginx
      - redis

volumes:
  redis_data:
    driver: local
  certbot-etc:
  certbot-var:

networks:
  default:
    name: keynest-network
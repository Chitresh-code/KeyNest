# KeyNest Production Docker Compose Configuration
version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: keynest_db
      POSTGRES_USER: keynest_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_db_password_change_in_production}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keynest_user -d keynest_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - keynest-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - keynest-network

  # KeyNest Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://keynest_user:${DB_PASSWORD:-secure_db_password_change_in_production}@db:5432/keynest_db
      - CACHE_BACKEND=django.core.cache.backends.redis.RedisCache
      - CACHE_LOCATION=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-change_this_secret_key_in_production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-generate_this_key_in_production}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-keynest.com,api.keynest.com,localhost}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-https://keynest.com,https://app.keynest.com}
      - EMAIL_HOST=${EMAIL_HOST:-smtp.gmail.com}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-True}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER:-}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD:-}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - keynest-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - keynest-network

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD:-secure_db_password_change_in_production}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /backup.sh
    depends_on:
      db:
        condition: service_healthy
    networks:
      - keynest-network
    profiles:
      - backup

  # Log aggregation (optional)
  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/tmp/loki
      - ./loki/loki.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - keynest-network
    profiles:
      - monitoring

  # Metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - keynest-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  loki_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  keynest-network:
    driver: bridge
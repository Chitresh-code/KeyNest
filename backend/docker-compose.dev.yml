# KeyNest Development Docker Compose Configuration
version: '3.8'

services:
  # PostgreSQL Database for Development
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: keynest_dev
      POSTGRES_USER: keynest_dev
      POSTGRES_PASSWORD: dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db-dev.sql:/docker-entrypoint-initdb.d/init-db-dev.sql:ro
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keynest_dev -d keynest_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - keynest-dev-network

  # Redis for Development
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - keynest-dev-network

  # KeyNest Development API
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://keynest_dev:dev_password@db:5432/keynest_dev
      - CACHE_BACKEND=django.core.cache.backends.redis.RedisCache
      - CACHE_LOCATION=redis://redis:6379/1
      - SECRET_KEY=dev-secret-key-not-for-production
      - ENCRYPTION_KEY=xJKbPlTdQyJGxJwBqTdwT3J4cJwVjJqJKTTnQJqQJGQ=  # Demo key for dev
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,13.203.105.44
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://localhost:3001,http://127.0.0.1:3001,https://key-nest-iota.vercel.app
      - EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
      - LOG_LEVEL=DEBUG
    ports:
      - "8001:8000"  # Different port for dev
    volumes:
      - .:/app
      - ./logs:/app/logs
      - /app/env  # Exclude virtual environment
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python manage.py runserver 0.0.0.0:8000
    networks:
      - keynest-dev-network

  # Database Admin Interface (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@keynest.dev
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - keynest-dev-network
    profiles:
      - admin

  # Redis Admin Interface (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - keynest-dev-network
    profiles:
      - admin

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - keynest-dev-network
    profiles:
      - mail

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  keynest-dev-network:
    driver: bridge
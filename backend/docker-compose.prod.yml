services:
  # Redis for Production
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - keynest-prod-network

  # KeyNest Production API (using external database)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DEBUG=False
      - DATABASE_URL=${DATABASE_URL}
      - CACHE_BACKEND=django.core.cache.backends.redis.RedisCache
      - CACHE_LOCATION=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-production-secret-key-change-this}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-xJKbPlTdQyJGxJwBqTdwT3J4cJwVjJqJKTTnQJqQJGQ=}
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,13.203.105.44
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://localhost:3001,http://127.0.0.1:3001,https://key-nest-iota.vercel.app
      - EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
      - LOG_LEVEL=INFO
    expose:
      - "8000"
    volumes:
      - ./logs:/app/logs
      - ./media:/app/media
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - keynest-prod-network

  # Nginx Reverse Proxy (SSL termination, static/media serving)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - keynest-prod-network

  # Log aggregation (optional)
  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/tmp/loki
      - ./loki/loki.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - keynest-prod-network
    profiles:
      - monitoring

  # Metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - keynest-prod-network
    profiles:
      - monitoring

  # PgAdmin (optional, for DB management)
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@keynest.dev
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - keynest-prod-network
    profiles:
      - admin

  # Redis Admin Interface (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - keynest-prod-network
    profiles:
      - admin

  # MailHog for email testing (optional)
  mailhog:
    image: mailhog/mailhog:latest
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - keynest-prod-network
    profiles:
      - mail

# === VOLUMES ===
volumes:
  redis_prod_data:
    driver: local
  static_volume:
  media_volume:
  loki_data:
  prometheus_data:
  pgadmin_data:

# === NETWORKS ===
networks:
  keynest-prod-network:
    driver: bridge